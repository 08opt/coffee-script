# TODO: switch/case statements
# Flow: For loops, etc.
# ++ and -- (prefix and postfix)
# postfix ifs and unlesses
# Fix array comprehensions -- they're mad busted.

# Functions:
square: x => x * x.

sum: x, y => x + y.

odd: x => x % 2 is 0.

even: x => x % 2 aint 0.

run_loop: =>
  fire_events( e => e.stopPropagation(). )
  listen()
  wait().

# Objects:
object_literal: {one: 1, two: 2, three: 3}

multiline_object: {
  pi: 3.14159
  list: [1, 2, 3, 4]
  three: new Idea()
  inner_obj: {
    freedom: => _.freedom().
  }
}

# Arrays:
stooges : [{moe: 45}, {curly: 43}, {larry: 46}]

exponents : [x => x., x => x * x., x => x * x * x.]

# Conditionals and ternaries.
if submarine.shields_up
  full_speed_ahead()
  weapons.fire_torpedos()
else
  run_away().

eldest: if 25 > 21 then liz else marge.

# Returning early:
race: =>
  run()
  walk()
  crawl()
  if tired then return sleep().
  race().

# Conditional operators:
good ||= evil
wine &&= cheese

# Nested property access and calls.
((moon.turn(360))).shapes[3].move({x: 45, y: 30}).position

# Try/Catch/Finally/Throw.
try
  all_hell_breaks_loose()
  dogs_and_cats_living_together()
  throw "up"
catch error
  print( error )
finally
  clean_up().

try all_hell_breaks_loose() catch error print(error) finally clean_up().

# While loops.
while demand > supply
  sell()
  restock().

while supply > demand then buy().

# Unary operators.
!!true

# For loops.
foods: ['toast', 'wine', 'cheese']
print(item.capitalize()) for item in foods.

drink(item) for item in foods if item is 'wine'.
