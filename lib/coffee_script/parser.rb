#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 392)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'11,247,260,129,37,44,51,57,63,2,7,16,21,26,202,208,42,48,56,60,222,223',
'12,22,27,225,122,40,47,218,61,225,5,13,121,129,32,36,194,50,55,62,1',
'6,15,197,129,144,122,43,8,17,206,187,246,235,121,32,231,221,26,87,91',
'94,97,102,105,108,207,128,8,17,224,248,261,129,8,17,20,32,30,11,41,218',
'54,37,44,51,57,63,2,7,16,21,26,134,229,42,48,56,60,128,229,12,22,27',
'8,17,40,47,193,61,128,5,13,150,136,32,36,72,50,55,62,1,6,15,237,30,252',
'41,43,54,8,17,137,8,17,69,187,8,17,128,8,17,205,136,122,151,201,8,17',
'169,191,234,121,,192,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,32,42,48,56,60,,229,12,22,27,8,17,40,47,,61,,5,13,-147,-147,32,36',
',50,55,62,1,6,15,87,91,8,17,43,87,91,94,97,102,105,108,110,112,115,84',
'86,90,93,96,101,104,107,109,111,114,87,91,94,97,102,105,108,20,,30,11',
'41,,54,37,44,51,57,63,2,7,16,21,26,-147,-147,42,48,56,60,,257,12,22',
'27,8,17,40,47,,61,,5,13,8,17,32,36,,50,55,62,1,6,15,73,74,-147,-147',
'43,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109',
'111,114,87,91,94,97,102,105,108,20,,30,11,41,,54,37,44,51,57,63,2,7',
'16,21,26,8,17,42,48,56,60,,254,12,22,27,8,17,40,47,,61,,5,13,-147,-147',
'32,36,,50,55,62,1,6,15,87,91,-147,-147,43,87,91,94,97,102,105,108,110',
'112,115,84,86,90,93,96,101,104,107,109,111,114,8,17,,187,,188,,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,87,91,42,48,56,60,-147,-147,12',
'22,27,8,17,40,47,,61,,5,13,-147,-147,32,36,,50,55,62,1,6,15,,,,,43,87',
'91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111',
'114,87,91,94,97,102,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,',
',42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,',
',,,43,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107',
'109,111,114,87,91,94,97,102,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16',
'21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1',
'6,15,,,,,43,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104',
'107,109,111,114,,,,,,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104',
'107,109,111,114,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26',
',,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15',
',,,,43,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107',
'109,111,114,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42',
'48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43',
'87,91,94,97,102,105,108,110,112,115,84,86,90,87,91,94,97,102,105,108',
'110,112,115,84,86,90,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,87,91,94,97,102,105,108,110,112,115,84,86,90,87,91,94,97,102',
'105,108,110,112,115,84,86,90,8,17,20,,30,11,41,,54,37,44,51,57,63,2',
'7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55',
'62,1,6,15,,,,,43,87,91,94,97,102,105,108,110,112,115,87,91,94,97,102',
'105,108,110,112,115,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,87,91,94,97,102,105,108,110,112,115,,,,,,,,,,,,,,,,,,,20,',
'30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,',
'40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,',
',12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42',
'48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43',
',,,,,,,,,,,,,,,,,,,,,,,,,,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16',
'21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1',
'6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57',
'63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,',
'50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54',
'37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5',
'13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40',
'47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12',
'22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48',
'56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,8,17,20,,30,11,41,,54,37,44,51,57',
'63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,',
'50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54',
'37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5',
'13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40',
'47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,',
',,,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,',
',12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42',
'48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63',
'2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50',
'55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37',
'44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13',
',,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,8,17,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40',
'47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,',
',,,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,',
',12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,',
',,,,,,,,,,,,,,,,,,8,17,20,,30,242,41,,54,37,44,51,57,63,2,7,16,21,26',
',,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15',
',,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,8,17,20,,30,11,41,,54,37,44,51,57,63',
'2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50',
'55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37',
'44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13',
',,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,8,17,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40',
'47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,',
',,,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,',
',12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,',
',,,,,,,,,,,,,,,,,,8,17,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26',
',,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15',
',,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,8,17,20,,30,11,41,,54,37,44,51,57,63',
'2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50',
'55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37',
'44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13',
',,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11',
'41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47',
',61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22',
'27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56',
'60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26',
',,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15',
',,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2',
'7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55',
'62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44',
'51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32',
'36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41',
',54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61',
',5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20',
',30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,',
',40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60',
',,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,',
'42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,',
',,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7',
'16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62',
'1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51',
'57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36',
',50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54',
'37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5',
'13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40',
'47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12',
'22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48',
'56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63',
'2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50',
'55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37',
'44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13',
',,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11',
'41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47',
',61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22',
'27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56',
'60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26',
',,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15',
',,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2',
'7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55',
'62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44',
'51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32',
'36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41',
',54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61',
',5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20',
',30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,',
',40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60',
',,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,',
'42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,',
',,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7',
'16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62',
'1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51',
'57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36',
',50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54',
'37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5',
'13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30',
'11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40',
'47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48,56,60,,,12',
'22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21,26,,,42,48',
'56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6,15,,,,,43,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63,2,7,16,21',
'26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50,55,62,1,6',
'15,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,30,11,41,,54,37,44,51,57,63',
'2,7,16,21,26,,,42,48,56,60,,,12,22,27,,,40,47,,61,,5,13,,,32,36,,50',
'55,62,1,6,15,88,,,98,43,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,20,,30,,41,',
'54,,,,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107',
'109,111,114,83,85,89,92,95,100,103,106,,88,113,82,98,,,,,251,,,,,,,',
',,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84',
'86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,,,113',
'82,,,,219,88,220,147,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87',
'91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111',
'114,83,85,89,92,95,100,103,106,,,113,82,8,17,88,,147,98,,,,,,,,,,,,',
',,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84',
'86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,,,113',
'82,8,17,88,,147,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91',
'94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114',
'83,85,89,92,95,100,103,106,,,113,82,8,17,88,,147,98,,,,,,,,,,,,,,,,',
',,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86',
'90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,,,113,82',
'8,17,88,,147,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94',
'97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83',
'85,89,92,95,100,103,106,,,113,82,8,17,88,,,98,,,,,,,,,,,,,,,,,,,,,,99',
',,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96',
'101,104,107,109,111,114,83,85,89,92,95,100,103,106,,88,113,82,98,,,',
',,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110',
'112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103',
'106,,88,113,82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94',
'97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83',
'85,89,92,95,100,103,106,,88,113,82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81',
',,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104',
'107,109,111,114,83,85,89,92,95,100,103,106,,88,113,82,98,,,,,,,,,,,',
',,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115',
'84,86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,,88',
'113,82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102',
'105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89',
'92,95,100,103,106,,88,113,82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,',
',,,,,,,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107',
'109,111,114,83,85,89,92,95,100,103,106,,88,113,82,98,,,,,,,,,,,,,,,',
',,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86',
'90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,262,88,113',
'82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105',
'108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89,92,95',
'100,103,106,,88,113,82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,',
',87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109',
'111,114,83,85,89,92,95,100,103,106,,88,113,82,98,,,,,,,,,,,,,,,,,,,',
',,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86,90',
'93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,265,88,113',
'82,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105',
'108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89,92,95',
'100,103,106,88,,,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,,,,,,,,,,,,87,91',
'94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114',
'83,85,89,92,95,100,103,106,88,,,98,,,,,,,,,,,,,,,,,,,,,,99,,,,,,81,',
',,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104',
'107,109,111,114,83,85,89,92,95,100,103,106,99,,,,,,81,,,,,,,,,,,,87',
'91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111',
'114,83,85,89,92,95,100,103,106,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102',
'105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89',
'92,95,100,103,106,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110',
'112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103',
'106,99,,,,,,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115,84,86',
'90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,81,,,,,',
',,,,,,87,91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107',
'109,111,114,83,85,89,92,95,100,103,106,81,,,,,,,,,,,,87,91,94,97,102',
'105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114,83,85,89',
'92,95,100,103,106,81,,,,,,,,,,,,87,91,94,97,102,105,108,110,112,115',
'84,86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,87',
'91,94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111',
'114,83,85,89,92,95,100,103,106,87,91,94,97,102,105,108,110,112,115,84',
'86,90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106,87,91',
'94,97,102,105,108,110,112,115,84,86,90,93,96,101,104,107,109,111,114',
'83,85,89,92,95,100,103,106,87,91,94,97,102,105,108,110,112,115,84,86',
'90,93,96,101,104,107,109,111,114,83,85,89,92,95,100,103,106' ]
        racc_action_table = arr = Array.new(8352, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,233,255,126,0,0,0,0,0,0,0,0,0,0,141,169,0,0,0,0,202,203,0,0,0,227',
'41,0,0,195,0,204,0,0,41,49,0,0,122,0,0,0,0,0,0,129,127,69,191,0,199',
'199,149,199,231,216,191,41,207,199,48,182,182,182,182,182,182,182,169',
'126,141,141,203,233,255,53,0,0,0,191,0,1,0,216,0,1,1,1,1,1,1,1,1,1,1',
'53,227,1,1,1,1,49,204,1,1,1,204,204,1,1,121,1,127,1,1,74,127,1,1,13',
'1,1,1,1,1,1,216,48,241,48,1,48,241,241,53,148,148,10,148,138,138,53',
'240,240,148,53,190,78,138,119,119,99,119,211,190,,119,211,211,1,,1,5',
'1,,1,5,5,5,5,5,5,5,5,5,5,,190,5,5,5,5,,263,5,5,5,263,263,5,5,,5,,5,5',
'143,143,5,5,,5,5,5,5,5,5,172,172,77,77,5,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,180,180,180',
'180,180,180,180,5,,5,6,5,,5,6,6,6,6,6,6,6,6,6,6,75,75,6,6,6,6,,249,6',
'6,6,249,249,6,6,,6,,6,6,258,258,6,6,,6,6,6,6,6,6,14,14,139,139,6,160',
'160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160',
'160,160,160,185,185,185,185,185,185,185,6,,6,260,6,,6,260,260,260,260',
'260,260,260,260,260,260,24,24,260,260,260,260,,243,260,260,260,243,243',
'260,260,,260,,260,260,133,133,260,260,,260,260,260,260,260,260,167,167',
'68,68,260,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,116,116,,116,,116,,260,,260,11,260,,260,11,11',
'11,11,11,11,11,11,11,11,164,164,11,11,11,11,66,66,11,11,11,79,79,11',
'11,,11,,11,11,124,124,11,11,,11,11,11,11,11,11,,,,,11,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'175,175,175,175,175,,,11,,11,12,11,,11,12,12,12,12,12,12,12,12,12,12',
',,12,12,12,12,,,12,12,12,,,12,12,,12,,12,12,,,12,12,,12,12,12,12,12',
'12,,,,,12,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,178,178,178,178,178,,,12,,12,259,12,,12,259',
'259,259,259,259,259,259,259,259,259,,,259,259,259,259,,,259,259,259',
',,259,259,,259,,259,259,,,259,259,,259,259,259,259,259,259,,,,,259,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,,,,,,259,259,259,,259,186,259,,259,186,186,186,186,186,186',
'186,186,186,186,,,186,186,186,186,,,186,186,186,,,186,186,,186,,186',
'186,,,186,186,,186,186,186,186,186,186,,,,,186,155,155,155,155,155,155',
'155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,,,,,,,,186',
',186,15,186,,186,15,15,15,15,15,15,15,15,15,15,,,15,15,15,15,,,15,15',
'15,,,15,15,,15,,15,15,,,15,15,,15,15,15,15,15,15,,,,,15,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,,,,,,,,15,,15,19,15,,15,19,19,19,19,19,19,19,19,19,19,,,19,19,19',
'19,,,19,19,19,,,19,19,,19,,19,19,,,19,19,,19,19,19,19,19,19,,,,,19,171',
'171,171,171,171,171,171,171,171,171,171,171,171,163,163,163,163,163',
'163,163,163,163,163,163,163,163,19,19,19,,19,20,19,,19,20,20,20,20,20',
'20,20,20,20,20,,,20,20,20,20,,,20,20,20,,,20,20,,20,,20,20,,,20,20,',
'20,20,20,20,20,20,,,,,20,174,174,174,174,174,174,174,174,174,174,174',
'174,174,166,166,166,166,166,166,166,166,166,166,166,166,166,20,20,20',
',20,187,20,,20,187,187,187,187,187,187,187,187,187,187,,,187,187,187',
'187,,,187,187,187,,,187,187,,187,,187,187,,,187,187,,187,187,187,187',
'187,187,,,,,187,161,161,161,161,161,161,161,161,161,161,156,156,156',
'156,156,156,156,156,156,156,,,,,,,,,187,,187,137,187,,187,137,137,137',
'137,137,137,137,137,137,137,,,137,137,137,137,,,137,137,137,,,137,137',
',137,,137,137,,,137,137,,137,137,137,137,137,137,,,,,137,158,158,158',
'158,158,158,158,158,158,158,,,,,,,,,,,,,,,,,,,137,,137,30,137,,137,30',
'30,30,30,30,30,30,30,30,30,,,30,30,30,30,,,30,30,30,,,30,30,,30,,30',
'30,,,30,30,,30,30,30,30,30,30,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30',
',30,40,30,,30,40,40,40,40,40,40,40,40,40,40,,,40,40,40,40,,,40,40,40',
',,40,40,,40,,40,40,,,40,40,,40,40,40,40,40,40,,,,,40,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,40,,40,250,40,,40,250,250,250,250,250,250,250,250,250,250',
',,250,250,250,250,,,250,250,250,,,250,250,,250,,250,250,,,250,250,,250',
'250,250,250,250,250,,,,,250,,,,,,,,,,,,,,,,,,,,,,,,,,,250,250,250,,250',
'43,250,,250,43,43,43,43,43,43,43,43,43,43,,,43,43,43,43,,,43,43,43,',
',43,43,,43,,43,43,,,43,43,,43,43,43,43,43,43,,,,,43,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,43,,43,47,43,,43,47,47,47,47,47,47,47,47,47,47,,,47,47,47',
'47,,,47,47,47,,,47,47,,47,,47,47,,,47,47,,47,47,47,47,47,47,,,,,47,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,47,,47,247,47,,47,247,247,247,247,247,247',
'247,247,247,247,,,247,247,247,247,,,247,247,247,,,247,247,,247,,247',
'247,,,247,247,,247,247,247,247,247,247,,,,,247,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,247,,247,246,247,,247,246,246,246,246,246,246,246,246,246,246',
',,246,246,246,246,,,246,246,246,,,246,246,,246,,246,246,,,246,246,,246',
'246,246,246,246,246,,,,,246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,246,,246,50',
'246,,246,50,50,50,50,50,50,50,50,50,50,,,50,50,50,50,,,50,50,50,,,50',
'50,,50,,50,50,,,50,50,,50,50,50,50,50,50,,,,,50,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,50,,50,242,50,,50,242,242,242,242,242,242,242,242,242,242,,',
'242,242,242,242,,,242,242,242,,,242,242,,242,,242,242,,,242,242,,242',
'242,242,242,242,242,,,,,242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,242,,242,54',
'242,,242,54,54,54,54,54,54,54,54,54,54,,,54,54,54,54,,,54,54,54,,,54',
'54,,54,,54,54,,,54,54,,54,54,54,54,54,54,,,,,54,,,,,,,,,,,,,,,,,,,,',
',,,,,,54,54,54,,54,55,54,,54,55,55,55,55,55,55,55,55,55,55,,,55,55,55',
'55,,,55,55,55,,,55,55,,55,,55,55,,,55,55,,55,55,55,55,55,55,,,,,55,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,55,,55,56,55,,55,56,56,56,56,56,56,56,56',
'56,56,,,56,56,56,56,,,56,56,56,,,56,56,,56,,56,56,,,56,56,,56,56,56',
'56,56,56,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,56,60,56,,56,60,60,60',
'60,60,60,60,60,60,60,,,60,60,60,60,,,60,60,60,,,60,60,,60,,60,60,,,60',
'60,,60,60,60,60,60,60,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,60,60,60,,60',
'61,60,,60,61,61,61,61,61,61,61,61,61,61,,,61,61,61,61,,,61,61,61,,,61',
'61,,61,,61,61,,,61,61,,61,61,61,61,61,61,,,,,61,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,61,,61,62,61,,61,62,62,62,62,62,62,62,62,62,62,,,62,62,62,62',
',,62,62,62,,,62,62,,62,,62,62,,,62,62,,62,62,62,62,62,62,,,,,62,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,62,,62,136,62,,62,136,136,136,136,136,136,136',
'136,136,136,,,136,136,136,136,,,136,136,136,,,136,136,,136,,136,136',
',,136,136,,136,136,136,136,136,136,,,,,136,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,136,,136,134,136,,136,134,134,134,134,134,134,134,134,134,134,,,134',
'134,134,134,,,134,134,134,,,134,134,,134,,134,134,,,134,134,,134,134',
'134,134,134,134,,,,,134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,134,,134,235,134',
',134,235,235,235,235,235,235,235,235,235,235,,,235,235,235,235,,,235',
'235,235,,,235,235,,235,,235,235,,,235,235,,235,235,235,235,235,235,',
',,,235,,,,,,,,,,,,,,,,,,,,,,,,,,,235,235,235,,235,189,235,,235,189,189',
'189,189,189,189,189,189,189,189,,,189,189,189,189,,,189,189,189,,,189',
'189,,189,,189,189,,,189,189,,189,189,189,189,189,189,,,,,189,,,,,,,',
',,,,,,,,,,,,,,,,,,,189,189,189,,189,145,189,,189,145,145,145,145,145',
'145,145,145,145,145,,,145,145,145,145,,,145,145,145,,,145,145,,145,',
'145,145,,,145,145,,145,145,145,145,145,145,,,,,145,,,,,,,,,,,,,,,,,',
',,,,,,,,,145,145,145,,145,225,145,,145,225,225,225,225,225,225,225,225',
'225,225,,,225,225,225,225,,,225,225,225,,,225,225,,225,,225,225,,,225',
'225,,225,225,225,225,225,225,,,,,225,,,,,,,,,,,,,,,,,,,,,,,,,,,225,225',
'225,,225,72,225,,225,72,72,72,72,72,72,72,72,72,72,,,72,72,72,72,,,72',
'72,72,,,72,72,,72,,72,72,,,72,72,,72,72,72,72,72,72,,,,,72,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,72,,72,73,72,,72,73,73,73,73,73,73,73,73,73,73,,',
'73,73,73,73,,,73,73,73,,,73,73,,73,,73,73,,,73,73,,73,73,73,73,73,73',
',,,,73,,,,,,,,,,,,,,,,,,,,,,,,,,,73,73,73,,73,223,73,,73,223,223,223',
'223,223,223,223,223,223,223,,,223,223,223,223,,,223,223,223,,,223,223',
',223,,223,223,,,223,223,,223,223,223,223,223,223,,,,,223,,,,,,,,,,,',
',,,,,,,,,,,,,,,223,223,223,,223,222,223,,223,222,222,222,222,222,222',
'222,222,222,222,,,222,222,222,222,,,222,222,222,,,222,222,,222,,222',
'222,,,222,222,,222,222,222,222,222,222,,,,,222,,,,,,,,,,,,,,,,,,,,,',
',,,,,222,222,222,,222,76,222,,222,76,76,76,76,76,76,76,76,76,76,,,76',
'76,76,76,,,76,76,76,,,76,76,,76,,76,76,,,76,76,,76,76,76,76,76,76,,',
',,76,,,,,,,,,,,,,,,,,,,,,,,,,,,76,76,76,,76,219,76,,76,219,219,219,219',
'219,219,219,219,219,219,,,219,219,219,219,,,219,219,219,,,219,219,,219',
',219,219,,,219,219,,219,219,219,219,219,219,,,,,219,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,219,,219,218,219,,219,218,218,218,218,218,218,218,218,218',
'218,,,218,218,218,218,,,218,218,218,,,218,218,,218,,218,218,,,218,218',
',218,218,218,218,218,218,,,,,218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,218,,218',
'128,218,,218,128,128,128,128,128,128,128,128,128,128,,,128,128,128,128',
',,128,128,128,,,128,128,,128,,128,128,,,128,128,,128,128,128,128,128',
'128,,,,,128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,,128,80,128,,128,80,80,80',
'80,80,80,80,80,80,80,,,80,80,80,80,,,80,80,80,,,80,80,,80,,80,80,,,80',
'80,,80,80,80,80,80,80,,,,,80,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80,,80,81,80',
',80,81,81,81,81,81,81,81,81,81,81,,,81,81,81,81,,,81,81,81,,,81,81,',
'81,,81,81,,,81,81,,81,81,81,81,81,81,,,,,81,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,81,,81,82,81,,81,82,82,82,82,82,82,82,82,82,82,,,82,82,82,82,,,82',
'82,82,,,82,82,,82,,82,82,,,82,82,,82,82,82,82,82,82,,,,,82,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,82,,82,83,82,,82,83,83,83,83,83,83,83,83,83,83,,',
'83,83,83,83,,,83,83,83,,,83,83,,83,,83,83,,,83,83,,83,83,83,83,83,83',
',,,,83,,,,,,,,,,,,,,,,,,,,,,,,,,,,,83,,83,84,83,,83,84,84,84,84,84,84',
'84,84,84,84,,,84,84,84,84,,,84,84,84,,,84,84,,84,,84,84,,,84,84,,84',
'84,84,84,84,84,,,,,84,,,,,,,,,,,,,,,,,,,,,,,,,,,,,84,,84,85,84,,84,85',
'85,85,85,85,85,85,85,85,85,,,85,85,85,85,,,85,85,85,,,85,85,,85,,85',
'85,,,85,85,,85,85,85,85,85,85,,,,,85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,85',
',85,86,85,,85,86,86,86,86,86,86,86,86,86,86,,,86,86,86,86,,,86,86,86',
',,86,86,,86,,86,86,,,86,86,,86,86,86,86,86,86,,,,,86,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,86,,86,88,86,,86,88,88,88,88,88,88,88,88,88,88,,,88,88',
'88,88,,,88,88,88,,,88,88,,88,,88,88,,,88,88,,88,88,88,88,88,88,,,,,88',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,88,,88,89,88,,88,89,89,89,89,89,89,89,89',
'89,89,,,89,89,89,89,,,89,89,89,,,89,89,,89,,89,89,,,89,89,,89,89,89',
'89,89,89,,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,89,90,89,,89,90,90,90',
'90,90,90,90,90,90,90,,,90,90,90,90,,,90,90,90,,,90,90,,90,,90,90,,,90',
'90,,90,90,90,90,90,90,,,,,90,,,,,,,,,,,,,,,,,,,,,,,,,,,,,90,,90,92,90',
',90,92,92,92,92,92,92,92,92,92,92,,,92,92,92,92,,,92,92,92,,,92,92,',
'92,,92,92,,,92,92,,92,92,92,92,92,92,,,,,92,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,92,,92,93,92,,92,93,93,93,93,93,93,93,93,93,93,,,93,93,93,93,,,93',
'93,93,,,93,93,,93,,93,93,,,93,93,,93,93,93,93,93,93,,,,,93,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,93,,93,94,93,,93,94,94,94,94,94,94,94,94,94,94,,',
'94,94,94,94,,,94,94,94,,,94,94,,94,,94,94,,,94,94,,94,94,94,94,94,94',
',,,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,,94,95,94,,94,95,95,95,95,95,95',
'95,95,95,95,,,95,95,95,95,,,95,95,95,,,95,95,,95,,95,95,,,95,95,,95',
'95,95,95,95,95,,,,,95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,95,,95,96,95,,95,96',
'96,96,96,96,96,96,96,96,96,,,96,96,96,96,,,96,96,96,,,96,96,,96,,96',
'96,,,96,96,,96,96,96,96,96,96,,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,96',
',96,97,96,,96,97,97,97,97,97,97,97,97,97,97,,,97,97,97,97,,,97,97,97',
',,97,97,,97,,97,97,,,97,97,,97,97,97,97,97,97,,,,,97,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,97,,97,98,97,,97,98,98,98,98,98,98,98,98,98,98,,,98,98',
'98,98,,,98,98,98,,,98,98,,98,,98,98,,,98,98,,98,98,98,98,98,98,,,,,98',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,98,,98,193,98,,98,193,193,193,193,193,193',
'193,193,193,193,,,193,193,193,193,,,193,193,193,,,193,193,,193,,193',
'193,,,193,193,,193,193,193,193,193,193,,,,,193,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,193,,193,100,193,,193,100,100,100,100,100,100,100,100,100,100',
',,100,100,100,100,,,100,100,100,,,100,100,,100,,100,100,,,100,100,,100',
'100,100,100,100,100,,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,,100,101',
'100,,100,101,101,101,101,101,101,101,101,101,101,,,101,101,101,101,',
',101,101,101,,,101,101,,101,,101,101,,,101,101,,101,101,101,101,101',
'101,,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,101,102,101,,101,102,102',
'102,102,102,102,102,102,102,102,,,102,102,102,102,,,102,102,102,,,102',
'102,,102,,102,102,,,102,102,,102,102,102,102,102,102,,,,,102,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,102,,102,103,102,,102,103,103,103,103,103,103,103',
'103,103,103,,,103,103,103,103,,,103,103,103,,,103,103,,103,,103,103',
',,103,103,,103,103,103,103,103,103,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,103,,103,104,103,,103,104,104,104,104,104,104,104,104,104,104,,,104',
'104,104,104,,,104,104,104,,,104,104,,104,,104,104,,,104,104,,104,104',
'104,104,104,104,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,104,105,104',
',104,105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,,,105',
'105,105,,,105,105,,105,,105,105,,,105,105,,105,105,105,105,105,105,',
',,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,105,106,105,,105,106,106,106',
'106,106,106,106,106,106,106,,,106,106,106,106,,,106,106,106,,,106,106',
',106,,106,106,,,106,106,,106,106,106,106,106,106,,,,,106,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,106,,106,107,106,,106,107,107,107,107,107,107,107,107',
'107,107,,,107,107,107,107,,,107,107,107,,,107,107,,107,,107,107,,,107',
'107,,107,107,107,107,107,107,,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,107',
',107,108,107,,107,108,108,108,108,108,108,108,108,108,108,,,108,108',
'108,108,,,108,108,108,,,108,108,,108,,108,108,,,108,108,,108,108,108',
'108,108,108,,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,,108,109,108,,108',
'109,109,109,109,109,109,109,109,109,109,,,109,109,109,109,,,109,109',
'109,,,109,109,,109,,109,109,,,109,109,,109,109,109,109,109,109,,,,,109',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,109,110,109,,109,110,110,110,110,110',
'110,110,110,110,110,,,110,110,110,110,,,110,110,110,,,110,110,,110,',
'110,110,,,110,110,,110,110,110,110,110,110,,,,,110,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,110,,110,208,110,,110,208,208,208,208,208,208,208,208,208',
'208,,,208,208,208,208,,,208,208,208,,,208,208,,208,,208,208,,,208,208',
',208,208,208,208,208,208,,,,,208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,208,,208',
'112,208,,208,112,112,112,112,112,112,112,112,112,112,,,112,112,112,112',
',,112,112,112,,,112,112,,112,,112,112,,,112,112,,112,112,112,112,112',
'112,,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,112,113,112,,112,113,113',
'113,113,113,113,113,113,113,113,,,113,113,113,113,,,113,113,113,,,113',
'113,,113,,113,113,,,113,113,,113,113,113,113,113,113,,,,,113,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,113,,113,114,113,,113,114,114,114,114,114,114,114',
'114,114,114,,,114,114,114,114,,,114,114,114,,,114,114,,114,,114,114',
',,114,114,,114,114,114,114,114,114,,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,114,,114,115,114,,114,115,115,115,115,115,115,115,115,115,115,,,115',
'115,115,115,,,115,115,115,,,115,115,,115,,115,115,,,115,115,,115,115',
'115,115,115,115,,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,,115,194,115',
',115,194,194,194,194,194,194,194,194,194,194,,,194,194,194,194,,,194',
'194,194,,,194,194,,194,,194,194,,,194,194,,194,194,194,194,194,194,',
',,,194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,194,,194,111,194,,194,111,111,111',
'111,111,111,111,111,111,111,,,111,111,111,111,,,111,111,111,,,111,111',
',111,,111,111,,,111,111,,111,111,111,111,111,111,239,,,239,111,,,,,',
',,,,,,,,,,,,,,,239,,,,,,239,,111,,111,,111,,111,,,,239,239,239,239,239',
'239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239',
'239,239,239,239,239,239,239,,196,239,239,196,,,,,239,,,,,,,,,,,,,,,',
',196,,,,,,196,,,,,,,,,,,,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,,,196,196,,,,196,238,196,238,238,,,,,,,,,,,,,,,,,,,,,,238,,,,,,238',
',,,,,,,,,,,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238',
'238,238,238,238,238,238,238,238,238,238,238,238,238,238,,,238,238,238',
'238,118,,118,118,,,,,,,,,,,,,,,,,,,,,,118,,,,,,118,,,,,,,,,,,,118,118',
'118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118',
'118,118,118,118,118,118,118,118,118,118,,,118,118,118,118,253,,253,253',
',,,,,,,,,,,,,,,,,,,,,253,,,,,,253,,,,,,,,,,,,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,,,253,253,253,253,125,,125,125,,,,,,,,,,,,,',
',,,,,,,,125,,,,,,125,,,,,,,,,,,,125,125,125,125,125,125,125,125,125',
'125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125',
'125,125,125,,,125,125,125,125,70,,70,70,,,,,,,,,,,,,,,,,,,,,,70,,,,',
',70,,,,,,,,,,,,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,,,70,70,70,70,117,,,117,,,,,,,,,,,',
',,,,,,,,,,117,,,,,,117,,,,,,,,,,,,117,117,117,117,117,117,117,117,117',
'117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117',
'117,117,117,,210,117,117,210,,,,,,,,,,,,,,,,,,,,,,210,,,,,,210,,,,,',
',,,,,,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,,232,210,210,232',
',,,,,,,,,,,,,,,,,,,,,232,,,,,,232,,,,,,,,,,,,232,232,232,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,232,232,232,232,,214,232,232,214,,,,,,,,,,,,,,,,,,,,,,214,,',
',,,214,,,,,,,,,,,,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,,215',
'214,214,215,,,,,,,,,,,,,,,,,,,,,,215,,,,,,215,,,,,,,,,,,,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,,29,215,215,29,,,,,,,,,,,,,,,,,',
',,,,29,,,,,,29,,,,,,,,,,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,,209,29,29,209,,,,,,,,',
',,,,,,,,,,,,,209,,,,,,209,,,,,,,,,,,,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,,256,209,209,256,,,,,,,,,,,,,,,,,,,,,,256,,,,,,256,',
',,,,,,,,,,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,140,256',
'256,140,,,,,,,,,,,,,,,,,,,,,,140,,,,,,140,,,,,,,,,,,,140,140,140,140',
'140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,140,,152,140,140,152,,,,,,,,,,,,,,,,,,,',
',,152,,,,,,152,,,,,,,,,,,,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,,264,152,152,264,,,,,,,,,,,,,,,,,,,,,,264,,,,,,264,,,,,,,,,,,,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,183,264,264,183,,,,',
',,,,,,,,,,,,,,,,,183,,,,,,183,,,,,,,,,,,,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,200,,,200,,,,,,,,,,,,,,,,,,,,,,200,,,,,,200,,,,',
',,,,,,,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,154,,,154,,,,,,',
',,,,,,,,,,,,,,,154,,,,,,154,,,,,,,,,,,,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,159,,,,,,159,,,,,,,,,,,,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,71,,,,,,71,,,,,,,,,,,,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,198,,,,',
',198,,,,,,,,,,,,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,168',
',,,,,168,,,,,,,,,,,,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'67,,,,,,,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,153,,,,,,,,,,,,153,153,153,153,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,153,153,153,153,153,142,,,,,,,,,,,,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176' ]
        racc_action_check = arr = Array.new(8352, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    79,   nil,   nil,   nil,   160,   241,   nil,   nil,   nil,
   137,   403,   484,    33,   208,   727,   nil,   nil,   nil,   808,
   889,   nil,   nil,   nil,   260,   nil,   nil,   nil,   nil,  7269,
  1132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1213,    19,   nil,  1375,   nil,   nil,   nil,  1456,    45,    19,
  1699,   nil,   nil,    59,  1861,  1942,  2023,   nil,   nil,   nil,
  2104,  2185,  2266,   nil,   nil,   nil,   380,  8080,   326,    47,
  6826,  7945,  2833,  2914,    97,   212,  3157,   131,    73,   352,
  3481,  3562,  3643,  3724,  3805,  3886,  3967,   nil,  4048,  4129,
  4210,   nil,  4291,  4372,  4453,  4534,  4615,  4696,  4777,   136,
  4939,  5020,  5101,  5182,  5263,  5344,  5425,  5506,  5587,  5668,
  5749,  6316,  5911,  5992,  6073,  6154,   317,  6904,  6592,    71,
   nil,    35,   -37,   nil,   394,  6748,   -13,    30,  3400,    30,
   nil,   nil,   nil,   313,  2428,   nil,  2347,  1051,    61,   245,
  7488,    -8,  8162,   151,   nil,  2671,   nil,   nil,    57,   -22,
   nil,   nil,  7561,  8121,  7851,   653,   987,   410,  1058,  7898,
   248,   977,   572,   828,   374,  8249,   909,   324,  8039,   -13,
  8220,   815,   162,  8191,   896,   431,  8278,   329,   512,   167,
   188,   491,    16,  7707,   734,   269,   646,   970,   nil,  2590,
   139,    41,   nil,  4858,  6235,    -2,  6434,   nil,  7992,   -28,
  7779,   nil,     5,    -2,    28,   nil,   nil,    43,  5830,  7342,
  6977,    79,   nil,   nil,  7123,  7196,    52,   nil,  3319,  3238,
   nil,   nil,  3076,  2995,   nil,  2752,   nil,    22,   nil,   nil,
   nil,    26,  7050,    -1,   nil,  2509,   nil,   nil,  6514,  6361,
    64,    54,  1780,   271,   nil,   nil,  1618,  1537,   nil,   190,
  1294,   nil,   nil,  6670,   nil,     0,  7415,   nil,   199,   565,
   322,   nil,   nil,   109,  7634,   nil ]

racc_action_default = [
    -1,  -147,   -37,   -14,  -112,  -147,  -147,   -38,   -25,   -15,
  -147,  -147,  -147,  -147,  -147,  -147,   -39,   -26,   -16,    -2,
   -90,   -40,   -33,   -17,    -3,   -95,   -94,   -34,   -18,    -4,
  -117,   -96,   -46,   -19,    -8,   -97,   -31,   -29,   -20,    -9,
  -147,  -106,   -92,  -147,   -30,   -21,   -10,  -147,  -147,  -110,
  -147,   -32,   -22,   -11,  -147,  -147,  -147,   -35,   -23,   -12,
  -147,  -147,  -147,   -36,   -24,   -13,   -51,   -86,   -53,  -147,
  -147,  -125,  -117,   -90,  -147,   -52,  -147,    -7,  -147,   -91,
    -6,  -147,  -147,  -147,  -147,  -147,  -147,   -55,  -147,  -147,
  -147,   -54,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,
  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,
  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -118,  -147,  -147,
  -107,  -147,  -147,   -44,   -49,  -147,  -111,  -147,  -147,  -147,
   -99,  -101,  -102,   -50,  -147,   -98,  -117,  -147,  -147,   -47,
   -45,  -123,   -85,   -48,   266,  -147,   -28,   -27,  -147,  -147,
   -93,   -89,    -5,   -87,   -84,   -75,   -64,   -76,   -65,  -145,
   -77,   -66,   -78,   -67,   -56,   -79,   -68,   -57,  -146,  -147,
   -80,   -69,   -58,   -81,   -70,   -59,   -82,   -71,   -60,   -72,
   -61,   -73,   -62,   -83,   -74,   -63,  -147,  -147,  -116,  -147,
  -147,  -147,  -105,  -147,  -147,  -147,  -147,  -100,  -113,  -147,
   -41,  -126,  -147,  -147,  -147,  -115,   -88,  -147,  -147,  -120,
  -119,  -147,  -109,  -108,   -42,   -43,  -147,  -134,  -147,  -147,
  -103,  -114,  -147,  -147,  -121,  -147,  -138,  -147,  -142,  -140,
  -144,  -147,  -147,    -8,  -127,  -147,  -135,  -132,  -147,  -147,
  -124,  -147,  -147,  -147,  -139,  -143,  -147,  -147,  -128,  -147,
  -147,  -104,  -122,  -147,  -141,    -8,  -147,  -133,  -136,  -147,
  -147,  -129,  -130,  -137,  -147,  -131 ]

racc_goto_table = [
    19,    66,   123,   233,   120,    67,    68,    78,   217,   145,
    10,    70,    71,   119,   126,    75,   116,   135,   203,   216,
   127,   244,   245,   nil,    80,   nil,   nil,   nil,   nil,   236,
   117,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   118,   255,   nil,   124,   nil,   nil,   nil,   125,   nil,   nil,
   133,   nil,   nil,   nil,   nil,   139,   140,   189,   148,   nil,
   149,   142,   143,   nil,   195,   nil,   nil,    24,   nil,   nil,
   146,   nil,   117,   nil,   nil,   nil,   nil,    80,   nil,    80,
   152,   153,   154,   155,   156,   157,   158,    79,   159,   160,
   161,   135,   162,   163,   164,   165,   166,   167,   168,   nil,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   nil,   146,   190,
   nil,   138,   199,   nil,   nil,   146,   nil,   141,   196,   nil,
   nil,   nil,   nil,   nil,   198,   nil,   117,   200,    80,   nil,
    79,    80,   nil,   nil,   nil,   nil,   nil,   nil,   186,   nil,
   nil,   123,   123,   212,   213,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   209,   210,   nil,   nil,
   nil,   nil,   259,   214,   215,   nil,   nil,   nil,   nil,   186,
   nil,   nil,   nil,   nil,    80,   nil,   nil,   nil,   232,   nil,
   nil,    80,   204,   nil,   nil,   nil,   nil,   nil,   238,   239,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,   nil,
    80,    80,   253,    80,   nil,   nil,   232,   256,   nil,    80,
   nil,   nil,   nil,   146,   nil,   nil,   211,   nil,    80,   nil,
   264,   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,
   241,   nil,   243,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   263 ]

racc_goto_check = [
     2,     4,    21,     5,    23,     4,     4,    25,    38,    22,
     1,     4,     4,    33,    30,     4,    35,    29,    36,    37,
     8,    39,    41,   nil,     2,   nil,   nil,   nil,   nil,    38,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,     5,   nil,     4,   nil,   nil,   nil,     4,   nil,   nil,
     4,   nil,   nil,   nil,   nil,     4,     4,    22,    35,   nil,
    25,     4,     4,   nil,    22,   nil,   nil,     3,   nil,   nil,
     2,   nil,     4,   nil,   nil,   nil,   nil,     2,   nil,     2,
     4,     4,     4,     4,     4,     4,     4,     3,     4,     4,
     4,    29,     4,     4,     4,     4,     4,     4,     4,   nil,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     2,   nil,     2,     2,
   nil,     3,    35,   nil,   nil,     2,   nil,     3,     4,   nil,
   nil,   nil,   nil,   nil,     4,   nil,     4,     4,     2,   nil,
     3,     2,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,    21,    21,    23,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,   nil,   nil,
   nil,   nil,    22,     4,     4,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,     4,   nil,
   nil,     2,     3,   nil,   nil,   nil,   nil,   nil,     4,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,     2,     4,     2,   nil,   nil,     4,     4,   nil,     2,
   nil,   nil,   nil,     2,   nil,   nil,     3,   nil,     2,   nil,
     4,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
     3,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,    10,     0,    67,     0,  -205,   nil,   nil,   -28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -39,   -61,   -37,   nil,   -13,   nil,   nil,   nil,   -36,
   -34,   nil,   nil,   -28,   nil,   -14,  -123,  -176,  -187,  -206,
   nil,  -205,   nil ]

racc_goto_default = [
   nil,   nil,    76,    77,    29,    34,    39,    46,    53,    59,
    65,     3,     9,    18,    23,    28,    33,    38,    45,    52,
    58,    64,   nil,   nil,    14,   nil,    25,    31,    35,   130,
    49,   131,   132,   nil,     4,   nil,   nil,   nil,   nil,   226,
   227,   228,   230 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 89, :_reduce_1,
  1, 89, :_reduce_2,
  1, 89, :_reduce_3,
  1, 91, :_reduce_4,
  3, 91, :_reduce_5,
  2, 91, :_reduce_6,
  2, 91, :_reduce_7,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 95, :_reduce_29,
  1, 95, :_reduce_30,
  1, 95, :_reduce_31,
  1, 95, :_reduce_32,
  1, 95, :_reduce_33,
  1, 95, :_reduce_34,
  1, 95, :_reduce_35,
  1, 95, :_reduce_36,
  1, 95, :_reduce_37,
  1, 95, :_reduce_38,
  1, 95, :_reduce_39,
  1, 95, :_reduce_40,
  3, 100, :_reduce_41,
  3, 111, :_reduce_42,
  3, 111, :_reduce_43,
  1, 111, :_reduce_44,
  2, 104, :_reduce_45,
  1, 109, :_reduce_46,
  2, 99, :_reduce_47,
  2, 99, :_reduce_48,
  2, 99, :_reduce_49,
  2, 99, :_reduce_50,
  2, 99, :_reduce_51,
  2, 99, :_reduce_52,
  2, 99, :_reduce_53,
  2, 99, :_reduce_54,
  2, 99, :_reduce_55,
  3, 99, :_reduce_56,
  3, 99, :_reduce_57,
  3, 99, :_reduce_58,
  3, 99, :_reduce_59,
  3, 99, :_reduce_60,
  3, 99, :_reduce_61,
  3, 99, :_reduce_62,
  3, 99, :_reduce_63,
  3, 99, :_reduce_64,
  3, 99, :_reduce_65,
  3, 99, :_reduce_66,
  3, 99, :_reduce_67,
  3, 99, :_reduce_68,
  3, 99, :_reduce_69,
  3, 99, :_reduce_70,
  3, 99, :_reduce_71,
  3, 99, :_reduce_72,
  3, 99, :_reduce_73,
  3, 99, :_reduce_74,
  3, 99, :_reduce_75,
  3, 99, :_reduce_76,
  3, 99, :_reduce_77,
  3, 99, :_reduce_78,
  3, 99, :_reduce_79,
  3, 99, :_reduce_80,
  3, 99, :_reduce_81,
  3, 99, :_reduce_82,
  3, 99, :_reduce_83,
  3, 99, :_reduce_84,
  2, 99, :_reduce_85,
  2, 99, :_reduce_86,
  3, 99, :_reduce_87,
  4, 98, :_reduce_88,
  3, 98, :_reduce_89,
  0, 113, :_reduce_90,
  1, 113, :_reduce_91,
  1, 112, :_reduce_92,
  3, 112, :_reduce_93,
  1, 96, :_reduce_94,
  1, 96, :_reduce_95,
  1, 96, :_reduce_96,
  1, 96, :_reduce_97,
  2, 96, :_reduce_98,
  2, 96, :_reduce_99,
  2, 117, :_reduce_100,
  1, 117, :_reduce_101,
  1, 117, :_reduce_102,
  3, 119, :_reduce_103,
  5, 120, :_reduce_104,
  3, 115, :_reduce_105,
  0, 121, :_reduce_106,
  1, 121, :_reduce_107,
  3, 121, :_reduce_108,
  3, 121, :_reduce_109,
  1, 97, :_reduce_110,
  2, 97, :_reduce_111,
  1, 97, :_reduce_112,
  3, 108, :_reduce_113,
  4, 118, :_reduce_114,
  4, 122, :_reduce_115,
  3, 114, :_reduce_116,
  0, 123, :_reduce_117,
  1, 123, :_reduce_118,
  3, 123, :_reduce_119,
  3, 123, :_reduce_120,
  4, 102, :_reduce_121,
  6, 102, :_reduce_122,
  0, 124, :_reduce_123,
  3, 124, :_reduce_124,
  2, 103, :_reduce_125,
  3, 116, :_reduce_126,
  5, 105, :_reduce_127,
  6, 106, :_reduce_128,
  8, 106, :_reduce_129,
  8, 106, :_reduce_130,
  10, 106, :_reduce_131,
  5, 107, :_reduce_132,
  7, 107, :_reduce_133,
  1, 125, :_reduce_134,
  2, 125, :_reduce_135,
  4, 126, :_reduce_136,
  5, 127, :_reduce_137,
  1, 128, :_reduce_138,
  2, 128, :_reduce_139,
  1, 129, :_reduce_140,
  3, 129, :_reduce_141,
  1, 130, :_reduce_142,
  2, 130, :_reduce_143,
  5, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146 ]

racc_reduce_n = 147

racc_shift_n = 266

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :THEN => 4,
  :UNLESS => 5,
  :NUMBER => 6,
  :STRING => 7,
  :REGEX => 8,
  :TRUE => 9,
  :FALSE => 10,
  :YES => 11,
  :NO => 12,
  :ON => 13,
  :OFF => 14,
  :IDENTIFIER => 15,
  :PROPERTY_ACCESS => 16,
  :CODE => 17,
  :PARAM => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :WHILE => 29,
  :SWITCH => 30,
  :WHEN => 31,
  :DELETE => 32,
  :INSTANCEOF => 33,
  :TYPEOF => 34,
  :SUPER => 35,
  :EXTENDS => 36,
  :NEWLINE => 37,
  :COMMENT => 38,
  :JS => 39,
  :UMINUS => 40,
  :NOT => 41,
  "!" => 42,
  "!!" => 43,
  "~" => 44,
  "++" => 45,
  "--" => 46,
  "*" => 47,
  "/" => 48,
  "%" => 49,
  "+" => 50,
  "-" => 51,
  "<<" => 52,
  ">>" => 53,
  ">>>" => 54,
  "&" => 55,
  "|" => 56,
  "^" => 57,
  "<=" => 58,
  "<" => 59,
  ">" => 60,
  ">=" => 61,
  "==" => 62,
  "!=" => 63,
  :IS => 64,
  :ISNT => 65,
  "&&" => 66,
  "||" => 67,
  :AND => 68,
  :OR => 69,
  "-=" => 70,
  "+=" => 71,
  "/=" => 72,
  "*=" => 73,
  "." => 74,
  ":" => 75,
  "||:" => 76,
  "&&:" => 77,
  "\n" => 78,
  ";" => 79,
  "=>" => 80,
  "," => 81,
  "[" => 82,
  "]" => 83,
  "{" => 84,
  "}" => 85,
  "(" => 86,
  ")" => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "THEN",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\".\"",
  "\":\"",
  "\"||:\"",
  "\"&&:\"",
  "\"\\n\"",
  "\";\"",
  "\"=>\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "PureExpression",
  "Statement",
  "Literal",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Comment",
  "Then",
  "AssignObj",
  "ParamList",
  "CodeBody",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "Slice",
  "AssignList",
  "Super",
  "ArgList",
  "Catch",
  "Whens",
  "When",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(val[0], val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(val[0], val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_46(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_88(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_89(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_90(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_91(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_92(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_93(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_94(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_95(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_98(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_100(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_103(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_104(val, _values, result)
     result = SliceNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_105(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_106(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_107(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_108(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_109(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_110(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_111(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_113(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_114(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_115(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_116(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_118(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_119(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_120(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_121(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_122(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_123(val, _values, result)
     result = [nil, nil] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_124(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_125(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_126(val, _values, result)
     result = ParentheticalNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_127(val, _values, result)
     result = WhileNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_128(val, _values, result)
     result = ForNode.new(val[0], val[4], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_129(val, _values, result)
     result = ForNode.new(val[0], val[6], val[2], nil, val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_130(val, _values, result)
     result = ForNode.new(val[0], val[4], val[2], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_131(val, _values, result)
     result = ForNode.new(val[0], val[6], val[2], val[8], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_132(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_133(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_134(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_135(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_136(val, _values, result)
     result = IfNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_137(val, _values, result)
     result = IfNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_138(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_139(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_140(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_143(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_144(val, _values, result)
     result = IfNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 381)
  def _reduce_145(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_146(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
